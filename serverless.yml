service: ds

custom:
  tableName: ds-data
  queueName: dstest.fifo
  bucketName: bucket031620
  documentation:
    version: '1'
    title: 'DS'
    description: 'DS'
    models:
      - name: "TransactionRequest"

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-openapi-documentation

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    TABLE_NAME: ${self:custom.tableName}
    BUCKET_NAME: ${self:custom.bucketName}
    SQS_URL:
      Ref: SQSQueue
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
        - dynamodb:PutItem
        - dynamodb:GetItem
        - s3:putObject
        - s3:getObject
        - sqs:SendMessage
      Resource: "*"

functions:
  # REST API
  authenticate:
    handler: api.authenticate
    events:
      - http:
          path: authenticate
          method: post
          cors: true
          documentation:
            summary: "authenticate"

  submit-transaction:
    handler: api.submitTransaction
    events:
      - http:
          path: api/v1/{tenant}
          method: post
          cors: true

  get-transaction-by-resource-id:
    handler: api.getTransaction
    events:
      - http:
          path: api/v1/{tenant}/{resourceID}
          method: get
          cors: true
          
  # Internal
  execute-transaction:
    handler: execute-transaction.executeTransaction
    timeout: 30

  save-transaction:
    handler: data.saveTransaction

  get-transaction:
    handler: data.getTransaction

  update-transaction:
    handler: data.updateTransaction
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ SQSQueue, Arn ]

  pm-proxy:
    handler: proxy/pm.handler

  rxrules-proxy:
    handler: proxy/rxrules.handler

  dhd-proxy:
    handler: proxy/dhd.handler

resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    DynamoTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: resourceID
            AttributeType: S
        KeySchema:
          - AttributeName: resourceID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    SQSQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        FifoQueue: true
        ContentBasedDeduplication: true
        QueueName: ${self:custom.queueName}